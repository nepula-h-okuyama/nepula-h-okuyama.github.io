<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiments Never Fail</title>
    <description>Try and try again
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 09 Nov 2016 22:35:15 +0900</pubDate>
    <lastBuildDate>Wed, 09 Nov 2016 22:35:15 +0900</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>DroidKaigi2017 に Xamarin ネタでトーク応募したよ</title>
        <description>&lt;p&gt;神からの啓示がありまして、 &lt;a href=&quot;https://droidkaigi.github.io/2017/&quot;&gt;DroidKaigi2017&lt;/a&gt; のトークに応募しました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;昨年 DroidKaigi2016 を聞きにいきました。 Kotlin、Go Mobile のセッションがありました。&lt;/p&gt;

&lt;p&gt;当時 Xamarin はまだプロプライエタリな有償の製品でした。今はほとんどオープンソースのプロダクトです。&lt;/p&gt;

&lt;p&gt;これはワンチャンあるで！&lt;/p&gt;

&lt;p&gt;応募内容は以下です。「○○界隈」いうのがあまり好きではないので、そういうのにこだわらない話をしたいと思っています。&lt;/p&gt;

&lt;hr&gt;

&lt;h2&gt;Title&lt;/h2&gt;

&lt;p&gt;Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発&lt;/p&gt;

&lt;h2&gt;Abstract&lt;/h2&gt;

&lt;h3&gt;対象者&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Android中級者〜&lt;/li&gt;
&lt;li&gt;C# 初心者〜&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;概要&lt;/h3&gt;

&lt;p&gt;Xamarin（ざまりん）は C# によるクロスプラットフォームモバイルアプリ開発ツールです。&lt;br&gt;
Microsoft が2016年4月に買収して、一気に知名度が上がりました。&lt;/p&gt;

&lt;p&gt;このセッションでは、 Xamarin とは、Xamarin.Android とは何か、C# や .NET Framework(Mono) の強力な言語・ライブラリ機能について触れ、通常の Android アプリ開発と Xamarin を使ったアプリ開発はどこが違って、どこが同じなのかを説明します。&lt;/p&gt;

&lt;p&gt;また、今日のモバイルアプリ開発では、DataBinding、MVVM、Reactive Extensions(Rx) といった、Microsoft が源流となっている手法が広まって来ています。&lt;br&gt;
Xamarin を使うと、MVVMパターンと Rx を使用し、大部分のコードを共有できる Android/iOS 両対応アプリケーションを開発できます。如何にしてコードを共有するか、できない場合にどのような解決策が用意されているかについてお話します。&lt;/p&gt;

&lt;h3&gt;目次（仮）&lt;/h3&gt;

&lt;h4&gt;1. Xamarin とは？&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Xamarin とは何か&lt;/li&gt;
&lt;li&gt;Xamarin.Android とは何か&lt;/li&gt;
&lt;li&gt;C# の利点(Java, Swift との比較)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;2. クロスプラットフォームアプリ開発とコードの共有&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;MVVMパターン&lt;/li&gt;
&lt;li&gt;Reactive Extensions / ReactiveProperty&lt;/li&gt;
&lt;li&gt;Portable Class Library(PCL)によるコード共有&lt;/li&gt;
&lt;li&gt;プラットフォーム固有の処理を行う方法&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;3. Open Xamarin、Open Microsoft&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Xamarin で使えるライブラリ(C#, Java)&lt;/li&gt;
&lt;li&gt;All Xamarin SDKs are open source&lt;/li&gt;
&lt;li&gt;.NET Standard&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;4. Xamarin の使いどころ&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;採用すべきケースとしなくてよいケース&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Topic&lt;/h2&gt;

&lt;p&gt;開発環境・ツール (Productivity and Tooling)&lt;/p&gt;

&lt;hr&gt;
</description>
        <pubDate>Tue, 25 Oct 2016 02:42:51 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/10/25/submit-cfp-for-droidkaigi2017/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/10/25/submit-cfp-for-droidkaigi2017/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Android</category>
        
        <category>C#</category>
        
        <category>DroidKaigi</category>
        
      </item>
    
      <item>
        <title>Xamarin を使わなくてもいい人たち</title>
        <description>&lt;p&gt;「Xamarin はいいぞ」ばかり言ってる私ですが、Xamarin がハマらないケースも当然あるわけで。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;　いくつかピックアップしてみたいと思います。&lt;/p&gt;

&lt;h2&gt;Android / iOS のスペシャリスト&lt;/h2&gt;

&lt;p&gt;　Android または iOS、Java や Swift が大好きで最先端を突っ走ってる人。&lt;br&gt;
あるいは、最新のOSの機能をガンガンアプリに取り入れていくプロダクト。&lt;/p&gt;

&lt;p&gt;　彼(または彼女)達に「Xamarin 使えよ、C# 使えよ」って言っても彼らの楽しみを奪ってしまうのでしない方がいいし、SDK が新しくなったら即使いたいという欲求はネイティブでないと満たせないですよね。&lt;br&gt;
　&lt;/p&gt;

&lt;h2&gt;配布サイズを気にするプロダクト&lt;/h2&gt;

&lt;p&gt;　Xamarin でアプリを作ると、Monoランタイムを同梱するため配布パッケージの容量がびっくりするくらい増えます。（Android の場合、HelloWorld でも 10MByte は切れないんじゃなかったかな？）&lt;br&gt;
　プロダクトが、世界をターゲットにしていて、それに回線の細い新興国も含まれている場合、注意した方がよいと思います。&lt;br&gt;
　&lt;/p&gt;

&lt;h2&gt;ガワネイティブでいいやつ&lt;/h2&gt;

&lt;p&gt;　Cordova, Monaca とかそういうの。例えばショッピングサイトのネイティブアプリだと、コンテンツの差し替えが激しいので HTML5 でモバイルWebサイトと共通化できたほうが運用の効率がよいです。&lt;br&gt;
　&lt;/p&gt;

&lt;h2&gt;宗教上の理由&lt;/h2&gt;

&lt;p&gt;　マイクロソフトに親を殺された人は使わないでしょう。ただ、過去に何があったかは知らないですけど、今のマイクロソフトはあなたを殺しませんよ？&lt;/p&gt;

&lt;h2&gt;　&lt;/h2&gt;

&lt;p&gt;こんなもんかなあ。逆を言えば、上に当てはまらなければ Xamarin を選択しない理由はないわけで。&lt;/p&gt;

&lt;p&gt;やっぱり、「Xamarin はいいぞ」&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Oct 2016 23:59:59 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/10/18/who-dont-need-xamarin/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/10/18/who-dont-need-xamarin/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Android</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>JXUGC #17 お前の Xamarin アプリを見せてみろ！ で発表してきました</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://jxug.connpass.com/event/39470/&quot;&gt;JXUGC #17 お前の Xamarin アプリを見せてみろ！ - connpass&lt;/a&gt; に参加、登壇してきました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/datapages/&quot;&gt;Xamarin DataPages&lt;/a&gt; をネタにしましたが、今回は本当に準備が不足してすいませんでした。何かをでっちあげることしかできませんでした。&lt;/p&gt;

&lt;p&gt;他のみなさんのアプリや発表、完成度が高くて脱帽です。&lt;/p&gt;

&lt;p&gt;一応、資料はこちら。&lt;/p&gt;

&lt;script async class=&quot;speakerdeck-embed&quot; data-id=&quot;f7a39d6e6d5742a185231e1e4e1d8953&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;ソースもあります。(Xamarinのリポジトリから切り取ってきた DataPages 関連のプロジェクト付き)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amay077/MikawaMorningApp&quot;&gt;amay077/MikawaMorningApp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回の参加は、たまには東京の人たちにも会いたいなーという動機、それから Xamarin.Forms.GoogleMaps の PR が目的でして。。。&lt;/p&gt;

&lt;p&gt;DataPages にそこまで期待しているわけじゃないけど、標準機能でできることが少ないなら Xamarin.Forms.GoogleMaps みたく、Fork して機能拡張しちゃえばいいやと軽い気持ちでソースを除いてみたのですが、うーむ分からん。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Xamarin.Forms.Pages.DataPage&lt;/code&gt; を継承したクラスに &lt;code&gt;ListDataPage&lt;/code&gt; というものがあって、これは与えられたデータソースを元に一覧画面を生成してくれます。更に、行を選択すると詳細画面も表示してくれます。&lt;/p&gt;

&lt;p&gt;ならば同じく &lt;code&gt;DataPage&lt;/code&gt; を継承して &lt;code&gt;MapDataPage&lt;/code&gt; を作ったら、一覧の代わりに地図にピン群が立つ画面を用意できるのでは？そんでピンをタップしたら詳細画面を表示できるのでは？と思ったのですが・・・。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;MapDataPage&lt;/code&gt; を用意することはできました。データソースを元に地図にピン群を立たせることはできました。&lt;/p&gt;

&lt;p&gt;しかし、詳細ページを表示する方法が分かりませんでした。&lt;/p&gt;

&lt;p&gt;もうちょっと詳しく言うと、&lt;code&gt;ListDataPage&lt;/code&gt; で行を選択したときに &lt;a href=&quot;https://github.com/amay077/MikawaMorningApp/blob/master/Xamarin.Forms.Pages/ListDataPage.cs#L46&quot;&gt;&lt;code&gt;DataTemplate.CreateContent()&lt;/code&gt;&lt;/a&gt; を呼び出していて、その返値が詳細画面となる &lt;code&gt;Page&lt;/code&gt; なのですが、 この &lt;code&gt;DataTemplate&lt;/code&gt; がよく分からない。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ListDataPage.DetailTemplateProperty&lt;/code&gt; への設定はいつだれが行っている？ DataTemplate は Xamarin.Forms.Core のソースなので、ちゃんとデバッグ環境作ればトレースできたかもしれません（だから Xamarin.Forms.Themes は関係ないかも知れない）が、ちょっと時間なく。。。&lt;/p&gt;

&lt;p&gt;この辺りの仕組みが分かれば、詳細画面で、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;http: で始まる文字列には、ハイパーリンクを設定する&lt;/li&gt;
&lt;li&gt;緯度経度だったら「地図」ボタンを表示する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などのカスタマイズもできると思うので、引き続きソースおっかけてみたいと思います。&lt;/p&gt;

&lt;p&gt;JXUG イベント多すぎだろ！と思いつつ、数回に１回は行きたいなーと思っているので、またよろしくおねがいします。&lt;/p&gt;

&lt;p&gt;最後に、「喫茶店で朝￥500円以上払ったらそれはモーニングサービスとは言わない」これはガチ。&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Oct 2016 19:29:05 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/10/16/gave-presentation-in-xamarin-jxugc-17/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/10/16/gave-presentation-in-xamarin-jxugc-17/</guid>
        
        
        <category>Xamarin</category>
        
        <category>勉強会</category>
        
      </item>
    
      <item>
        <title>MVP アワードキットが届きました</title>
        <description>&lt;p&gt;海の向こうから、「MVPアワードキット」が届きましたよっと。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;箱！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/received_mvp_award_kit_01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h3&gt;中身！！&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/received_mvp_award_kit_02.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;盾&lt;/li&gt;
&lt;li&gt;置物&lt;/li&gt;
&lt;li&gt;メンバーカードみたいなやつ&lt;/li&gt;
&lt;li&gt;ピンバッジ&lt;/li&gt;
&lt;li&gt;説明書みたいなやつ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;この他には書類とか MVP のステッカーとか。さっそく（会社の）MacBook Pro に貼ってやったぜぇー。&lt;/p&gt;

&lt;p&gt;MVPのセンパイ方も、初めて受賞したときはこういう事したんだろうなーと思いながら自分もやってしまったｗ&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 02:08:57 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/10/12/received-mvp-award-kit/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/10/12/received-mvp-award-kit/</guid>
        
        
        <category>Microsoft</category>
        
        <category>MVP</category>
        
      </item>
    
      <item>
        <title>初めて Microsoft MVP になりました！</title>
        <description>&lt;h4&gt;Microsoft から離れてモバイルアプリ開発者になったつもりが、いつの間にか &lt;a href=&quot;https://mvp.microsoft.com/ja-jp/overview&quot;&gt;Microsoft MVP&lt;/a&gt; になっていた&lt;/h4&gt;

&lt;!--more--&gt;

&lt;p&gt;何を言ってるのかわからねーと思うが、そういうことですｗ&lt;/p&gt;

&lt;p&gt;元々 VB や VC で Windows のアプリケーション開発をしていましたが、転職を機に Android/iOS アプリ開発にクラスチェンジしたのは2011年頃の話です。&lt;/p&gt;

&lt;p&gt;が、やっぱり C# が好きで、 &lt;a href=&quot;http://qiita.com/search?q=+user%3Aamay077+tag%3Axamarin&amp;amp;sort=stock&quot;&gt;2013年から「Xamarin はいいぞ！」と言い続けていた&lt;/a&gt; ら、Xamarin が Microsoft に買収され、Xamarin も Microsoft MVP の対象に！&lt;/p&gt;

&lt;p&gt;Xamarin 関係で、&lt;a href=&quot;https://twitter.com/iseebi&quot;&gt;@iseebi&lt;/a&gt; さんや &lt;a href=&quot;https://twitter.com/ytabuchi&quot;&gt;@ytabuchi&lt;/a&gt; さんが受賞されるなか、「こりゃワタシもワンチャンある？」と思い申請しましたらありがたく MVP になることができました。&lt;/p&gt;

&lt;p&gt;カテゴリは Visual Studio and Development Technologies ですが、Xamarin のことしか詳しくないので、これからも &lt;strong&gt;「Xamarin はいいぞ！」&lt;/strong&gt; と言い続けていきます。&lt;/p&gt;

&lt;p&gt;まだ Microsoft 系の開発者には浸透していないであろう Android/iOS アプリの開発ノウハウについて、あるいは両者の技術コミュニティが繋がるような活動ができれば、と思っています。&lt;/p&gt;

&lt;p&gt;（あ、 &lt;a href=&quot;http://aile.hatenablog.com/entry/2016/10/02/005811&quot;&gt;Xamarin.Macの人&lt;/a&gt; とは同期受賞になるのかな、 &lt;strong&gt;Windowsを使わないMVP&lt;/strong&gt; 同士、がんばりましょうｗ）&lt;/p&gt;

&lt;p&gt;年末にかけて、 Xamarin関連の勉強会には(地方からだけど)ちょいちょい顔を出しますし、12月には Xamarin Advent Calendar を今年もやります！&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;4年目となる Xamarin Advent Calendar 2016 もやるから皆さんよろ〜&lt;br&gt;2015 - &lt;a href=&quot;https://t.co/EbFffM48no&quot;&gt;https://t.co/EbFffM48no&lt;/a&gt;&lt;br&gt;2014 - &lt;a href=&quot;https://t.co/siRSDoDhJ8&quot;&gt;https://t.co/siRSDoDhJ8&lt;/a&gt;&lt;br&gt;2013 - &lt;a href=&quot;https://t.co/JkdGFRt8i7&quot;&gt;https://t.co/JkdGFRt8i7&lt;/a&gt;&lt;/p&gt;&amp;mdash; これがあめいの選択だよ (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/777844707669909504&quot;&gt;2016年9月19日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;よろしくおねがいします。&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Oct 2016 17:40:18 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/10/02/become-microsoft-mvp-for-the-first-timme/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/10/02/become-microsoft-mvp-for-the-first-timme/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Microsoft</category>
        
        <category>MVP</category>
        
      </item>
    
      <item>
        <title>JetBrains の Open Source License をいただきました</title>
        <description>&lt;p&gt;　JetBrains は、 Androidアプリ開発者には Android Studio の元となっているIDE「IntelliJ IDEA」、C# 開発者には、Visual Studio拡張機能「ReSharper」を販売している企業としておなじみですよね。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;JetBrains 製品群とオープンソースライセンス&lt;/h2&gt;

&lt;p&gt;　そんな JetBrains 製品群、便利と聞きつつも個人では購入するのをためらっていました（Xamarin は有償でも買ってたのにな！）。&lt;/p&gt;

&lt;p&gt;その JetBrains に非商用のオープンソースプロジェクト開発者にライセンスを提供してくれる「Free Open Source License」があるのを知ったのは数ヶ月前のことです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/buy/opensource/&quot;&gt;JetBrains :: Opensource license&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　「今の僕なら、 &lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps&quot;&gt;Xamarin.Forms.GoogleMaps&lt;/a&gt; 開発してるし、(少ないけど)コントリビューションしてくれる人も居るし、 nuget のダウンロード数も 1,800超えてるしワンチャンあるのでは？」 と思い申請してみました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Xamarin.Forms.GoogleMaps 作り始めて３ヶ月経ったので JetBrains OSS License ワンチャン&lt;/p&gt;&amp;mdash; これがあめいの選択だよ (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/781369150635507712&quot;&gt;2016年9月29日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;　すると驚き、ものの数時間で「おｋ、ライセンスやるお」ってメールが!はやっ！！&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;やったー！ JetBrains OSS License もらえた！！ってかレビューはやっ！ &lt;a href=&quot;https://t.co/i9yGYXCOsP&quot;&gt;pic.twitter.com/i9yGYXCOsP&lt;/a&gt;&lt;/p&gt;&amp;mdash; これがあめいの選択だよ (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/781428124399448064&quot;&gt;2016年9月29日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;　ありがとう JetBrains、そしてありがとう Xamarin と Microsoft。 Xamarin がオープンソースにしてくれたから、それをフォークして、自分のプロジェクトにできて、ライセンスもらえました。&lt;/p&gt;

&lt;p&gt;　これで超便利と噂の Resharper 先生が使えます（普段Macだけどな！）&lt;/p&gt;

&lt;p&gt;　Eclipse の代わりに IntelliJ IDEA 使うぞ！&lt;/p&gt;

&lt;p&gt;　今まで Early Access Program で何とか使ってた &lt;a href=&quot;https://www.jetbrains.com/datagrip/&quot;&gt;DataGrip&lt;/a&gt; もガッツリ使うぞ。&lt;/p&gt;

&lt;p&gt;　&lt;strong&gt;&lt;a href=&quot;https://www.jetbrains.com/rider/&quot;&gt;Rider&lt;/a&gt; のリリース心待ちにしてます。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　ほかのプロダクトは…あまり知らなかったけどいろいろ使ってみるぞ！&lt;/p&gt;

&lt;h2&gt;みんなもワンチャンあるで&lt;/h2&gt;

&lt;p&gt;　申請時、 Number of commiters 的な項目があったので、 &lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps/graphs/contributors&quot;&gt;Xamarin.Forms.GoogleMaps にコミットしてくれていた人の数&lt;/a&gt; で「3」と入力したら、ライセンスも3つくれました（残りの２つはコミッターの方々に提供するつもりです）。&lt;/p&gt;

&lt;p&gt;　これが意味するのは、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;自分でオープンソースプロジェクトを立ち上げなくても、どこからのプロジェクトに「積極的に」参加して、そのオーナーさんに「申請して」って言えばいいのでは&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　そのプロジェクトに大きめな関わりができて、良好な関係が築ければオーナーさんも引き受けてくれるのではないでしょうか（また、オーナーでなければ申請できないというルールでもないです）。JetBrains Open Source License について知らなければ、みんなにメリットのある事ですし。（コミッターが多い場合、いくつまで License を発行してくれるのかはさじ加減が必要かも知れませんが）&lt;/p&gt;

&lt;p&gt;　もちろん、自分でOSSを始めるのも全然アリです。Xamarin.Forms.GoogleMaps もほぼ一人プロジェクトで、歴史も浅く、規模もとても小さいです。あ、頑張って README などを英語で書いている、というのは効いているのかも知れません。&lt;/p&gt;

&lt;p&gt;　最後に宣伝ですが、 Xamarin.Forms.GoogleMaps にコントリビュートしていただければ、来年のライセンス更新時に「Number of commiters」を増やせて、参加して頂いた方にもライセンス供給できるかもしれませんので、プルリクなどよろしくおねがいします。&lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues&quot;&gt;ISSUES&lt;/a&gt; が溜まってきているのですｗ&lt;/p&gt;
</description>
        <pubDate>Thu, 29 Sep 2016 21:28:17 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/09/29/got-jetbrains-opensource-lisence/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/09/29/got-jetbrains-opensource-lisence/</guid>
        
        
        <category>opensource</category>
        
        <category>jetbrains</category>
        
      </item>
    
      <item>
        <title>東京出張で AirBnB を初めて使ってみた</title>
        <description>&lt;p&gt;　仕事で東京に１週間滞在する機会があったので、初めて AirBnB を使ってみました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;　説明する必要があるかわからないけど、 &lt;a href=&quot;https://www.airbnb.jp/&quot;&gt;AirBnB&lt;/a&gt; は、一般のお宅の一部（一部屋とか）を宿泊先として借りる（使う人）サービスのことで、日本では「民泊」と呼ばれています。当然、貸す側の人もいるわけで、それらの仲介をしているのが AirBnB などのサービスです。&lt;/p&gt;

&lt;p&gt;　AirBnB の用語？で、部屋を貸す人を「ホスト」、借りる人を「ゲスト」と呼びます。&lt;/p&gt;

&lt;p&gt;　前から興味あったし、予算に見合うビジネスホテルがなかったので、代わりになる宿泊先を AirBnB で探して使ってみました。&lt;/p&gt;

&lt;h2&gt;宿泊してみて&lt;/h2&gt;

&lt;h3&gt;料金&lt;/h3&gt;

&lt;p&gt;　今回の物件は、部屋の広さが6畳くらい。料金は、清掃料約2000円＋1泊約5,000円です。4泊したので合計約25,000円でした。付近のビジネスホテルと比べると1泊あたりで2000〜3000円ほど安いです。&lt;/p&gt;

&lt;h3&gt;チェックイン、チェックアウト&lt;/h3&gt;

&lt;p&gt;　ホストさんとのやりとりは Facebook メッセンジャーで行い、チェックインの際には実際にお会いして、部屋の説明などをしていただきましたが、それ以来、チェックアウトの時も、会うことはありませんでした。&lt;/p&gt;

&lt;h3&gt;マンションへの出入り&lt;/h3&gt;

&lt;p&gt;　滞在中は家のカギを貸していただけるので、マンションへの出入りは自由でした。住人と思しき人から「こんばんわー」などと挨拶されることもありましたが、これって絶対 &lt;strong&gt;ご近所さんと間違われてる&lt;/strong&gt; よね？&lt;/p&gt;

&lt;h3&gt;生活音&lt;/h3&gt;

&lt;p&gt;　今回の物件は、ホストさん達の居住空間の空いている部屋を貸し出しているタイプ。しかしその部屋は居住空間とは扉で分断されていました。生活音はわずかに聞こえますが、声などは聞こえませんでした。誰が何人住んでいるのかを伺い知ることもできませんでした。たまに掃除とか、移動の音が聞こえるくらい。&lt;/p&gt;

&lt;h3&gt;洗面など&lt;/h3&gt;

&lt;p&gt;　バブラシなどのアメニティは用意されていない物件だったので、自分で用意したものを使いました。タオルは、ホストさんのご好意で使い放題になっており、大変助かりました。&lt;br&gt;
　&lt;/p&gt;

&lt;h3&gt;お風呂&lt;/h3&gt;

&lt;p&gt;　浴槽はゲストに使わせる想定では無かったようだったのでシャワーでした。海外の方だとシャワーで十分なんですかね。&lt;/p&gt;

&lt;h3&gt;緊張感&lt;/h3&gt;

&lt;p&gt;　ビジネスホテルと違う緊張感はあります。全裸でトイレやお風呂に行くことはさすがにできません。&lt;/p&gt;

&lt;h3&gt;通信環境&lt;/h3&gt;

&lt;p&gt;　Free WiFiが２つ(内１つはモバイルWiFi)されており、自由に使うことができました。速度的にも問題なかったです。&lt;br&gt;
　&lt;/p&gt;

&lt;h3&gt;家の鍵を渡す／受け取るということ&lt;/h3&gt;

&lt;p&gt;　利用者は本人確認をしているとはいえ、自宅の鍵を他人に渡して自由に使わせるってどんな気分だろうなーと思いました。自分ならとてもムリ。それを超えるメリット（異文化コミュニケーションとか？）があるということでしょうか。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/airbnb_first_impression_01.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;　お借りした部屋のホワイトボードには、ここに泊まったゲストの人たちの、ホストへの感謝のことばがたくさん書かれていました。from アメリカ、オーストラリア、フランス、中国、台湾、シンガポール、デンマーク、フィリピンなどなど。僕も足させてもらいましたよ、日本語でｗ&lt;/p&gt;

&lt;h2&gt;AirBnB をまた利用したいか&lt;/h2&gt;

&lt;p&gt;　うん、また利用してみたいですね。&lt;/p&gt;

&lt;p&gt;　ひとりで、東京に遊びに行く時など、なるべく宿泊費は浮かせたい、けどカプセルホテルじゃイヤだ、というときの選択肢になるでしょう。&lt;/p&gt;

&lt;p&gt;　今回は、ホストさんがほとんど干渉して来ないタイプでワタシ的にはとてもありがたかったです。AirBnB の物件には、いろいろな種類の物件があるので、その違いをもっと見てみたいという気もします。&lt;/p&gt;

&lt;p&gt;　日頃スタートアップのWebサービスのニュースは見るけど、使う機会はなかなか無いので、もっといろいろ使っていかないとなあとも思ってます。&lt;a href=&quot;https://www.uber.com/ja/&quot;&gt;Uber&lt;/a&gt; も使ってみたいぞ！&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Sep 2016 23:59:59 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/09/16/airbnb_first_impression/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/09/16/airbnb_first_impression/</guid>
        
        
        <category>民泊</category>
        
        <category>AirBnB</category>
        
      </item>
    
      <item>
        <title>Xamarinハンズオン浜松(再び) で講師をしました</title>
        <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://jaghama.connpass.com/event/37686/&quot;&gt;Xamarinハンズオン浜松(再び) #JXUG #jaghama - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.amay077.net/blog/2016/07/10/joined_xamarin_hads_on_ad_hamamatsu/&quot;&gt;前回&lt;/a&gt; から２ヶ月、「もう一度浜松で開催して欲しい」と要望があったとのことで、前回の田淵さんに代わり、講師役として協力させていただきました。&lt;/p&gt;

&lt;h2&gt;プレイベント「さわやかを食べる会」&lt;/h2&gt;

&lt;p&gt;今回もウォーミングアップは さわやか です（前回とは違う店だよ）。&lt;br&gt;
前回は げんこつハンバーグ でしたが、今回は &lt;em&gt;普通の&lt;/em&gt; ハンバーグ、こいつもウマイ！！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/joined_xamarin_hands_on_ad_hamamatsu_2_01.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;h2&gt;ハンズオン振り返り&lt;/h2&gt;

&lt;p&gt;一応、概要説明の資料はこちらにおいておきますね(前回の講師である田淵さんの資料をほぼ丸パクリですがｗ)。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/amay077/xamarin-xamarin201609-jxug-jaghama&quot;&gt;Xamarin基礎講座 Xamarinハンズオン(2016.09 浜松) #JXUG #jaghama&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は約２０名の方に参加していただけました。&lt;/p&gt;

&lt;p&gt;会場がとてもキレイでした、ご協力ありがとうございます、○○鉄道さま！（どこまで公開してよいか分からないから一応伏せといた）&lt;/p&gt;

&lt;p&gt;Windows + Visual Studio の方が多かったのに、私自身が普段 Mac + Xamarin Studio 使いなので、ちょっと不安だなー、と思っていましたが、その通りでした💧&lt;/p&gt;

&lt;p&gt;何名かの人で、 Visual Studio ならでは(?) な問題が発生して、環境が作れなかったりしました。&lt;br&gt;
本当はその場で解決してあげたかったんですが、Visual Studio のトラブルシューティングの引き出しが少なく…。&lt;/p&gt;

&lt;p&gt;とはいえ、今後も Mac から Windows に乗り換えることは無さそうなので、どうしたもんかなぁ、という感じです。&lt;/p&gt;

&lt;h2&gt;打ち上げ&lt;/h2&gt;

&lt;p&gt;駅前の浜松餃子屋さんで軽く打ち上げ。混んでたためか、餃子の追加注文お断りとのことで、余裕を持って頼んだ結果こうなりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/joined_xamarin_hands_on_ad_hamamatsu_2_02.JPG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;大人５人だったからなんとか食べきれましたね、浜松餃子も旨かった！&lt;/p&gt;

&lt;h2&gt;ちょまどさん&lt;/h2&gt;

&lt;p&gt;Microsoft のエバンジェリストであるちょまど(&lt;a href=&quot;https://twitter.com/chomado&quot;&gt;@chomado&lt;/a&gt;)さんも来ていただき、サポートスタッフをお願いしました、ありがとうございました！&lt;/p&gt;

&lt;p&gt;新たな伝説のネタとなって、浜松&lt;strong&gt;市&lt;/strong&gt; も大変うれしく思います（^^）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://togetter.com/li/1020144&quot;&gt;浜松町と浜松 - Togetterまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/chomado&quot;&gt;@chomado&lt;/a&gt; &lt;br&gt;&lt;br&gt;だいたいさ！&lt;br&gt;&lt;br&gt;浜松&lt;br&gt;と&lt;br&gt;浜松町&lt;br&gt;&lt;br&gt;が全然違うところなんて本当に知らなかったよ！&lt;br&gt;&lt;br&gt;会社(日本マイクロソフト品川本社)の隣駅と浜松町だと思ってたら、&lt;br&gt;&lt;br&gt;まさかの新幹線ですよ！&lt;br&gt;&lt;br&gt;もちろん自費です！&lt;/p&gt;&amp;mdash; ちょまど@MS入社してから5ヶ月 (@chomado) &lt;a href=&quot;https://twitter.com/chomado/status/771907617555828740&quot;&gt;2016年9月3日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;以前も浜松市の勉強会に、浜松町と間違えて登録された方がいましたが、間違いに気づいてキャンセルされました。実際に来られたのは &lt;a href=&quot;https://twitter.com/chomado&quot;&gt;@chomado&lt;/a&gt; さんが初めてです。&lt;/p&gt;&amp;mdash; 4度目S+のあめいスピナーリミックス (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/771913137792491520&quot;&gt;2016年9月3日&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;また次回も ~~浜松町と間違えて~~ 来てください！&lt;/p&gt;

&lt;h2&gt;地方も Xamarin がんばろう&lt;/h2&gt;

&lt;p&gt;東京・関東あたりは、Xamarin の勉強会を毎月数回やっている感じですが、地方はまだまだ少なめ。&lt;/p&gt;

&lt;p&gt;直近だと、長野県でもくもく会があるそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://glnagano.connpass.com/event/39782/&quot;&gt;ギークラボ長野 Xamarinもくもく会 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;地方の観光スポットor特産品を釣り餌にしていただけると、ワタシも喰いつきやすいです。&lt;br&gt;
よろしくおねがいします。&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Sep 2016 20:43:45 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/09/10/joined-xamarin-hads-on-ad-hamamatsu-revenge/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/09/10/joined-xamarin-hads-on-ad-hamamatsu-revenge/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Android</category>
        
        <category>勉強会</category>
        
      </item>
    
      <item>
        <title>Xamarin.iOS でインターネット通信が可能かを取得する</title>
        <description>&lt;p&gt;Xamarin.iOS で、「端末からインターネット通信が可能か？」を調べたい。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Objective-C だと &lt;a href=&quot;https://github.com/tonymillion/Reachability&quot;&gt;Reachability&lt;/a&gt;、swift だと &lt;a href=&quot;https://github.com/ashleymills/Reachability.swift&quot;&gt;Reachability.swift&lt;/a&gt; を使うようだけど、 Xamarin.iOS ではどうするか？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://d.hatena.ne.jp/scientre/20150527/get_network_status_in_swift&quot;&gt;Swift でネットワーク状況を調べる - メモ用紙&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bindingライブラリがあるのかな？と思ったら、サンプルで C# のソースコードが提供されていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/recipes/ios/network/reachability/detect_if_network_is_available/&quot;&gt;Detect if Network is Available - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の &lt;a href=&quot;https://github.com/xamarin/monotouch-samples/blob/master/ReachabilitySample/reachability.cs&quot;&gt;&lt;code&gt;reachability.cs&lt;/code&gt;&lt;/a&gt; がそれ。&lt;br&gt;
（名前から察して Reachability.swift を C# で書きなおしたもの？詳しくは見てないけど。）&lt;/p&gt;

&lt;p&gt;で、このサンプルの &lt;code&gt;Reachability&lt;/code&gt; を使うと、以下のような感じで、「インターネット通信が可能か？」を調べられる。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsNetworkAvailable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reachability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;InternetConnectionStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetworkStatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NotReachable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;WiFi とかセルラーとか細かいステータスもあるので、あとはコードを見てください。&lt;/p&gt;
</description>
        <pubDate>Fri, 26 Aug 2016 23:59:59 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/08/26/ger_is_network_available_on_xamarin_ios/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/08/26/ger_is_network_available_on_xamarin_ios/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Xamarin.iOS</category>
        
        <category>iOS</category>
        
        <category>C#</category>
        
      </item>
    
      <item>
        <title>NavigationPage + MasterDetailPage の時に iOS の NavigationBar の左ボタンをカスタマイズする</title>
        <description>&lt;p&gt;Xamarin.Forms では、左からスライドして出てくるメニューを持つ画面を &lt;code&gt;MasterDetailPage&lt;/code&gt; で作成します。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/navigation/master-detail-page/&quot;&gt;Master-Detail Page - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一方、普通に画面遷移していく場合は ContentPage などを &lt;code&gt;NavigationPage&lt;/code&gt; でラップしてあげます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/user-interface/navigation/hierarchical/&quot;&gt;Hierarchical Navigation - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;やりたいこと&lt;/h2&gt;

&lt;p&gt;何がしたいかというと、両者を組み合わせたいんです。こういうことってよくありませんかね？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;起動画面で「新規ユーザー登録」があって、「ユーザー登録画面」を経て、メインの画面に遷移する、メイン画面にはスライドメニューがある、というパターン。これを Xamarin.Forms でやりたいのです。&lt;/p&gt;

&lt;h2&gt;問題&lt;/h2&gt;

&lt;p&gt;ところが、 &lt;code&gt;NavigationPage&lt;/code&gt; で遷移していく画面の中に &lt;code&gt;MasterDetailPage&lt;/code&gt; があると、 &lt;code&gt;NavigationPage&lt;/code&gt; の方が勝ってしまい、ナビゲーションバーには「BACK」ボタンが表示されてしまいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_02.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;これを消そうと、&lt;code&gt;MasterDetailPage&lt;/code&gt; のコンストラクタで &lt;code&gt;NavigationPage.SetHasBackButton(this, false)&lt;/code&gt; してみます。&lt;/p&gt;

&lt;p&gt;その結果がこれ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Android の方は望む結果になったけど、iOSの方はうーん…、BACKボタンは消えたけど、メニューを表示させるボタンが出ません。&lt;/p&gt;

&lt;p&gt;しょうがないので、iOS の場合だけ、ナビゲーションバーの左ボタンをどうにかして追加してみます。&lt;/p&gt;

&lt;h2&gt;私が求めていたソリューション（CustomRenderer編）&lt;/h2&gt;

&lt;p&gt;Xamarin.Forms のお供、CustomRenderer です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/custom-renderer/&quot;&gt;Customizing Controls on Each Platform - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ticktack.hatenablog.jp/entry/2016/06/11/124751&quot;&gt;【Xamarin.Forms】ViewRendererと仲良くなるための簡易チュートリアル - ぴーさんログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MasterDetailPage&lt;/code&gt; の iOS向けCustomRenderer を作って、ネイティブ側でナビゲーションバーをカスタマイズしてみます。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// CustomMasterDetailRenderer.cs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MasterDetail.iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MonoTouch.UIKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms.Platform.iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[assembly: ExportRenderer(typeof(MasterDetailPage), typeof(CustomMasterDetailRenderer))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MasterDetail.iOS&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomMasterDetailRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PhoneMasterDetailRenderer&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ViewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ViewWillAppear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MasterDetailPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NavigationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TopViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NavigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LeftBarButtonItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MENU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIBarButtonItemStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPresented&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPresented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;「MENU」ってボタンを、ナビゲーションバーの左側に追加しています。&lt;br&gt;
こんな CustomRenderer を iOS 側のプロジェクトに追加して実行してみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_04.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;オーケーオーケー、これが私が求めていたソリューションです。&lt;/p&gt;

&lt;h2&gt;私が求めていたソリューション（Effects編）&lt;/h2&gt;

&lt;p&gt;が、CustomRenderer にはいくつか考えなければならないことがあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;上で作った &lt;code&gt;CustomMasterDetailRenderer.cs&lt;/code&gt; は &lt;code&gt;PhoneMasterDetailRenderer&lt;/code&gt; というクラスを継承しています。が、実はこれは iPhone 用で、実はタブレット（iPad）用に &lt;code&gt;TabletMasterDetailRenderer&lt;/code&gt; というクラスもあります。これの CustomRenderer も用意しなければなりませんか？&lt;/li&gt;
&lt;li&gt;CustomRenderer はベースとなる ViewRenderer を「継承」して作ります。そして C# は多重継承を許していません、この意味が分かるな？別の機能を拡張したいと思ったら&lt;code&gt;CustomMasterDetailRenderer&lt;/code&gt;から派生させるしかなくなります。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、 Xamarin.Forms には、v2.1 から既存機能の拡張に Effects という選択肢が加わりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/effects/&quot;&gt;Customizing Controls with Effects - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ticktack.hatenablog.jp/entry/2016/01/26/020248&quot;&gt;【Xamarin.Forms 2.1.0(プレビュー)】Effects - ぴーさんログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では、&lt;code&gt;CustomMasterDetailRenderer.cs&lt;/code&gt; を Effects に変えてみましょう。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// CustomMasterDetailEffect.cs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MasterDetail.iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MonoTouch.UIKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms.Platform.iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[assembly: ResolutionGroupName(&quot;mycompany&quot;)]&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;[assembly: ExportEffect(typeof(CustomMasterDetailEffect), &quot;CustomMasterDetailEffect&quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MasterDetail.iOS&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomMasterDetailEffect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PlatformEffect&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnAttached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MasterDetailPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Appearing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Page_Appearing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnDetached&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MasterDetailPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Appearing&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Page_Appearing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Page_Appearing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetParentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MasterDetailPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NavigationController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TopViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NavigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;navigationItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LeftBarButtonItems&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UIBarButtonItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MENU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIBarButtonItemStyle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Plain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; 
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
                    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPresented&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPresented&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
                &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetParentViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;UIResponder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NextResponder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Effect は、 &lt;code&gt;ResolutionGroupName&lt;/code&gt; と &lt;code&gt;ExportEffect&lt;/code&gt; で定義した名称を使って、PCL側プロジェクトで Page に追加します。&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// RootPage.cs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RootPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MasterDetailPage&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RootPage&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;NavigationPage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetHasBackButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Effect を追加する
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;Effects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Effect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mycompany.CustomMasterDetailEffect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// 以下省略
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://dl.dropboxusercontent.com/u/264530/qiita/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_05.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;こちらも、CustomRenderer と同じことができました。&lt;/p&gt;

&lt;p&gt;が、ちょっと黒魔術っぽいの使ってます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Effects.Container&lt;/code&gt; から取得できるのは &lt;code&gt;UIView&lt;/code&gt; です。親の &lt;code&gt;UIViewController&lt;/code&gt; を得るには、 &lt;code&gt;GetParentViewController()&lt;/code&gt; でやってるような事をしなければなりません&lt;/li&gt;
&lt;li&gt;CustomRenderer はそれ自体は &lt;code&gt;ViewController&lt;/code&gt; だったので &lt;code&gt;ViewWillAppear()&lt;/code&gt; など画面のライフサイクルコールバックを override することができました。が、Effects から ViewController のライフサイクルイベントをハンドリングできません。代わりに Xamarin.Forms 側の &lt;code&gt;Page&lt;/code&gt; のライフサイクルから &lt;code&gt;Appearing&lt;/code&gt; イベントで処理するようにしています。そのため、「MENU」ボタンが表示されるタイミングが若干遅れます。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;CustomRenderer と Effects 、どちらを使えばいいの？&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CustomRenderer はできる事は多いが、複数の CustomRenderer を適用することはできない&lt;/li&gt;
&lt;li&gt;Effects はできる事は少ないが、複数の機能拡張を同時に適用できる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上を考えると、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;まずあなたの行いたいことが Effects で実現できないか、試してみる&lt;/li&gt;
&lt;li&gt;Effects でできないレベルなら CustomRenderer を選択する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となるでしょう。&lt;/p&gt;

&lt;p&gt;本件のネタは、 Effects ではかなりムリをして実現しているので、CustomRenderer の方が相応しいと思われます。&lt;br&gt;
が、CustomRenderer はここぞという時にとっておきたい気もします。&lt;br&gt;
このさじ加減は、作るアプリの規模・深度、汎用性、再利用性などによって変わってくるでしょう。Effects の方が汎用性・再利用性は高いですが、ネイティブのUIパーツをごっそり入れ替えるような深い事は、CustomRenderer でなければできません。&lt;/p&gt;

&lt;p&gt;今回のプログラムは Github に上げてあります。（&lt;code&gt;CustomMasterDetailRenderer.cs&lt;/code&gt; はコメントアウトしてあって、Effects の方を活かしてます。）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/amay077/XFNavigationWithMasterDetailSample/blob/master/README.md&quot;&gt;XFNavigationWithMasterDetailSample/README.md at master · amay077/XFNavigationWithMasterDetailSample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は「Effects で頑張りたい派」かな。&lt;/p&gt;
</description>
        <pubDate>Fri, 22 Jul 2016 23:59:59 +0900</pubDate>
        <link>http://localhost:4000/blog/2016/07/22/customizing_left_button_on_-NavigationBar_in_using_navigationpage_with_masterdetailpage/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/2016/07/22/customizing_left_button_on_-NavigationBar_in_using_navigationpage_with_masterdetailpage/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Xamarin.Forms</category>
        
        <category>iOS</category>
        
        <category>C#</category>
        
      </item>
    
  </channel>
</rss>
